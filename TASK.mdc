Wood Generator – New Requirements Plan (step-by-step)

Objective

- Achieve full presets parity with the official three.js WebGPU TSL wood demo presets (genuses × finishes).
- Update the configurator UI: show a 4×10 presets grid with thumbnails, and move advanced sliders into a collapsible section (collapsed by default).
- Default selection should be matte white_oak, matching the current look.

References

- three.js TSL wood example: https://threejs.org/examples/webgpu_tsl_wood.html

Scope

- Files mainly impacted:
  - `services/frontend-react/src/lib/tslmaterials/wood-noise/presets.ts`
  - `services/frontend-react/src/lib/tslmaterials/wood-noise/index.ts`
  - `services/frontend-react/src/layout/PanelConfigurator.tsx`
  - Store where `woodParams` live (`createNewConfiguratorModule.ts`)

Presets parity in tslmaterials

1. Reuse official types and lists

   - Import/re-export `WoodNodeMaterial`, `WoodGenuses`, `Finishes` from `three/addons/materials/WoodNodeMaterial.js` (already re-exported in `index.ts`).
   - Define `type WoodGenus` and `type WoodFinish` using the official types.

2. Add preset access helpers

   - Add `getOfficialPresetParams(genus: WoodGenus, finish: WoodFinish)` that returns a normalized parameters object we can map to our `woodParams` (string colors converted to linear RGB triplets when needed).
   - Add `createOfficialWoodMaterial(genus: WoodGenus, finish: WoodFinish)` that calls `WoodNodeMaterial.fromPreset(genus, finish)` and applies finish-specific overrides from store (e.g., `clearcoat`, `clearcoatRoughness`).

3. Populate all presets

   - Genuses (columns, 10): `teak`, `walnut`, `white_oak`, `pine`, `poplar`, `maple`, `red_oak`, `cherry`, `cedar`, `mahogany`.
   - Finishes (rows, 4): `gloss`, `semigloss`, `matte`, `raw`.
   - Export a structure such as `AllWoodPresets: { [finish in WoodFinish]: { [genus in WoodGenus]: Preset } }` to power the grid.

4. Mapping to our legacy TSL material (if used)
   - Implement a mapping function from official `WoodParameters` to our `WoodNodeParams` used by `material.ts`/`nodes.ts` to keep both paths in sync.
   - Ensure color conversion and parameter naming differences are handled (e.g., `lightGrainColor`/`darkGrainColor`, warp/ring controls).

Thumbnails for presets

5. Implement preview generation and caching
   - Implement `getPresetThumbnail(genus, finish)` that creates a 64–96 px PNG data URL per preset via a small offscreen three.js render using `WoodNodeMaterial.fromPreset` on a simple plane/box, tone mapping matched to the canvas.
   - Cache by key `${finish}:${genus}` in-memory to avoid recomputation on re-render.
   - SSR-safe: only generate in the browser after mount; show a neutral placeholder until ready.

Store updates

6. Extend store to track selection and apply presets
   - Add `selectedGenus: WoodGenus` and `selectedFinish: WoodFinish` with defaults `white_oak` and `matte`.
   - Add `applyPreset(genus, finish)` that:
     - Updates `selectedGenus`/`selectedFinish`.
     - Updates `woodParams` to the official preset params (mapped to our material path) and applies finish-related surface options (`clearcoat`, `clearcoatRoughness`, `clearcoatDarken`).
   - Keep all existing individual `woodParams` fields to allow advanced overrides post-preset.

PanelConfigurator UI

7. Presets grid (top of the wood section)

   - Above the sliders, render a 4×10 grid of thumbnails: rows = `gloss`, `semigloss`, `matte`, `raw`; columns = the 10 genuses listed above.
   - Each cell shows the thumbnail + a small label (genus). Row headers show finishes. Use rem units and CSS grid.
   - Clicking a cell calls `applyPreset(genus, finish)`. The currently selected cell is highlighted with a focus ring and an active border.
   - Accessibility: each cell is a button with `aria-pressed` and keyboard navigation (arrow keys move focus within the grid; Enter/Space selects).

8. Advanced sliders in a collapsible container

   - Wrap the existing wood generator sliders in a `<details>`/`<summary>` or custom collapse component, default collapsed. Summary text: "Advanced wood generator".
   - Maintain the current grid layout for sliders. Keep all clamps and steps as-is. Respect `rem` units.

9. Default selection and first render
   - On init, set default to `matte` + `white_oak` (current behavior). Ensure the initial material reflects the preset before any manual slider changes.

Material application path

10. Material handling

- If using the official material: instantiate via `WoodNodeMaterial.fromPreset(selectedGenus, selectedFinish)` and apply store finish tweaks.
- If using our legacy TSL material: map official params via the adapter and call `updateWoodNodeMaterialTSL` with the mapped fields.

Validation and polish

11. Visual checks

- Compare our `matte white_oak` to the three.js demo for basic parity.
- Sample a few combinations (e.g., `gloss teak`, `semigloss walnut`, `raw maple`) and verify thumbnails match viewport results.

12. UX/QA

- Grid performance (thumbnail caching working, no layout thrash).
- Keyboard and screen reader usability of the grid and the collapsible section.
- ESLint/TypeScript clean; no implicit any; strict null checks.

Outcomes

- A complete presets grid (4×10) aligned with the official demo.
- Collapsible advanced controls, collapsed by default.
- Default preset is `matte` + `white_oak`.
