Part 3 – Backend API: Save/Load Configurator States (step-by-step plan)

Objective

- Persist and manage versions of configurator states in the backend (Postgres via Express).
- In `PanelConfigurator.tsx`, add a “Saved states” section with a thumbnail grid (like the material presets) to save, load, rename, and delete.
- Define a Zod schema and JSON template for serializing/deserializing all parameters present in `PanelConfigurator.tsx`/`createNewConfiguratorModule.ts` (dimensions, shelves/columns, thicknesses, material details, presets selection, wood parameters).

References

- Monorepo layout and dev flow in `README.mdc`.
- Store shape in `services/frontend-react/src/scenes/createNewConfiguratorModule.ts`.
- Panel UI in `services/frontend-react/src/layout/PanelConfigurator.tsx`.

Scope (files impacted)

- Backend (Express):
  - `services/backend-express/src/schemas/configuratorState.ts`
  - `services/backend-express/src/db/client.ts`
  - `services/backend-express/src/db/migrations/001_init.sql` (or auto-create on boot)
  - `services/backend-express/src/controllers/states.controller.ts`
  - `services/backend-express/src/routes/states.routes.ts`
- Frontend (React):
  - `services/frontend-react/src/api/states.ts`
  - `services/frontend-react/src/scenes/serialize.ts` (serialize/deserialize helpers)
  - `services/frontend-react/src/layout/PanelConfigurator.tsx` (new Saved states section)
  - Optional: `services/frontend-react/src/state/SavedStates.store.ts` (client cache)

Data model (Postgres)

- Table: `configurator_states`
  - `id` UUID primary key (default gen_random_uuid())
  - `name` TEXT NOT NULL
  - `thumbnail_data_url` TEXT NULL (PNG data URL; small preview ~12–40KB)
  - `state` JSONB NOT NULL (validated by Zod; see schema below)
  - `created_at` TIMESTAMPTZ DEFAULT now()
  - `updated_at` TIMESTAMPTZ DEFAULT now()
  - Index on `created_at DESC`

Zod schema (shared shape mirrors ModuleState)

- Backend: `ConfiguratorStateZ` to validate request/response bodies:
  - `version` string (e.g., "1") for future migrations
  - `dimensions`: `{ width: number; height: number; depth: number }`
  - `columns`: `Array<{ id: string; x: number; width: number }>`
  - `shelves`: `Array<{ id: string; y: number }>`
  - `columnThickness`: number
  - `shelfThickness`: number
  - `frameThickness`: number
  - `materials`: `Record<string, { name: string; color?: string; mapUrl?: string | null }>`
  - `selectedMaterialKey`: `string | null`
  - `woodParams`: full object as in `ModuleState` (include all numeric controls + `lightColor`/`darkColor`)
  - `selectedGenus`: string (from `WoodGenuses`)
  - `selectedFinish`: string (from `Finishes`)
  - `hoveredId`: `{ type: 'shelf' | 'column' | null; id: string | null }`
  - `selectedId`: `{ type: 'shelf' | 'column' | null; id: string | null }`

API design (Express)

- Base URL: `${VITE_API_URL}/api/states`
- Endpoints:
  - `GET /api/states?limit=24&offset=0&query=foo` → list summaries `{ id, name, thumbnail_data_url, created_at }`
  - `GET /api/states/:id` → full `{ id, name, thumbnail_data_url, state }`
  - `POST /api/states` → create `{ name: string; thumbnail_data_url?: string; state: ConfiguratorStateZ }`
  - `PUT /api/states/:id` → update `{ name?: string; thumbnail_data_url?: string; state?: ConfiguratorStateZ }`
  - `DELETE /api/states/:id` → delete
- Validate request bodies and responses with Zod; return 400 on validation errors.

Backend steps

1. Create Zod schema `ConfiguratorStateZ` under `src/schemas/` (TypeScript export types for API).
2. Add DB client (`pg`) and ensure `DATABASE_URL` wired (already via Compose). Auto-run a simple `CREATE TABLE IF NOT EXISTS` at boot or add a migration SQL.
3. Implement controller functions: `listStates`, `getState`, `createState`, `updateState`, `deleteState` with input/output validation and parameterized queries.
4. Mount routes under `/api/states` in Express app; include JSON error handler returning consistent shape.
5. Optional: add simple rate-limit/cors if needed for local dev.

Frontend serialization helpers

6. Implement `serializeModuleStore(store: StoreApi<ModuleStore>): ConfiguratorState`:
   - Read everything from the store (`dimensions`, `columns`, `shelves`, thicknesses, `materials`, `selectedMaterialKey`, `woodParams`, `selectedGenus`, `selectedFinish`, `hoveredId`, `selectedId`).
   - Include `version: '1'`.
7. Implement `applySerializedState(state: ConfiguratorState, store)`: set dimensions, set thicknesses, set shelves/columns, set materials selections, set wood values, and selection.

Thumbnail generation (client)

8. Generate a small data URL preview when saving:
   - Use the existing `FrontViewSVG` with current store values rendered to an offscreen `<svg>` and call `new XMLSerializer().serializeToString(svg)`, then wrap as `data:image/svg+xml;base64,...` OR rasterize to PNG via a temporary `<canvas>` for more consistent thumbnails.
   - Target preview size ≈ 160×100 px; keep bytes minimal.

PanelConfigurator UI – Saved states section

9. Add a new section above the wood presets (or just below it):
   - Header: “Saved states”.
   - Grid (CSS grid with `rem` sizing) of thumbnails (rows wrap). Each cell shows:
     - Thumbnail image
     - Name (truncate)
     - Actions: Load (primary on click), small Delete (✕) button; optional Rename inline.
   - Active snapshot highlights like material presets.
10. Controls:

- “Save current as…” button → opens small inline input (name) + Save. On save: serialize store → POST `/api/states` with `name`, `thumbnail_data_url`, `state`.
- “Update” available when a saved state is currently loaded → PUT with new state + regenerated thumbnail.
- Delete button on card → DELETE.

11. Data loading:

- On mount, fetch `GET /api/states?limit=48` and display. Debounce rename updates.
- Clicking a card loads full by `GET /api/states/:id`, then `applySerializedState`.

Types & validation

12. Duplicate the Zod schema on the frontend or derive from a typed module (keep schemas in-sync manually for now). Validate responses before applying.

Migrations & env

13. Add SQL migration or boot-time DDL in backend; document in README that Compose will provision the table.
14. Ensure `.env` has `VITE_API_URL` and backend has `DATABASE_URL` (already in repo). Compose runs both.

Testing & QA

15. Manual flow:

- Start Docker: `docker compose up --build`.
- Create shelves/columns, change sizes/materials, save snapshot, reload page → snapshot appears; click to load back; rename/delete; update.

16. Validation:

- Zod rejects malformed payloads. API returns 400 with issues.
- ESLint/TS clean; use `rem` units in UI.

Outcome

- Backend can persist multiple named versions with thumbnails.
- Frontend “Saved states” grid enables save/load/rename/delete.
- JSON format (Zod-validated) covers all configurator parameters for reliable restore.
